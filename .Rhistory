#GMPR function you can download from https://github.com/jchen1981/GMPR
sizeFactorsB <- GMPR(mm10Counts, ct.min = 20)
normC <- log2(t(t(mm10Counts) / sizeFactorsB$gmpr) + 1)
nonLog <- t(t(mm10Counts) / sizeFactorsB$gmpr)
library(scLVM)
?configLimix
sample(2, 1)
sample(2, 1)
sample(2, 1)
sample(2, 1)
sample(2, 1)
sample(2, 1)
sample(2, 1)
sample(3, 1)
install.packages("/home/tyranchik/Downloads/ggcyto_1.4.0.tar.gz", repos = NULL, type = "source")
library(BiocInstaller)
biocLite("flowWorkspace")
sessionInfo()
sessionInfo()
library(BiocInstaller)
biocLite("beeswarm")
library(beeswarm)
?sample
?runif
beeswarm(runif(100) ~ sample(2, 100, replace = T))
beeswarm(runif(1000) ~ sample(2, 1000, replace = T))
sample(2, 1)
sample(2, 1)
sample(2, 1)
sample(2, 1)
sample(2, 1)
sample(2, 1)
sample(2, 1)
sample(2, 1)
sample(2, 1)
sample(10, 1)
sample(3, 1)
sample(2, 1)
sample(2, 1)
sample(3, 1)
sample(2, 1)
sample(2, 1)
sample(2, 1)
sample(2, 1)
sample(2, 1)
sample(2, 1)
sample(3, 1)
sample(3, 1)
sample(2, 1)
sample(3, 1)
sample(2, 1)
sample(3, 1)
sample(2, 1)
sample(2, 1)
sample(2, 1)
paste("fic", sample(110404, 40))
paste0("fic", sample(110404, 40))
sample(2, 1)
sample(76, 1)
s <- 73
sample(2, 1)
sample(75, 1)
s <- s + 2
sample(2, 1)
sample(27, 1)
sample(27, 1)
s <- s + 3
sample(2, 1)
sample(27, 1)
s <- s + 2
sample(2, 1)
sample(74, 1)
s <- s + 10
sample(2, 1)
sample(74, 1)
s <- s + 5
sample(2, 1)
sample(27, 1)
sample(2, 1)
sample(39, 1)
sample(2, 1)
sample(2, 1)
sample(2, 1)
sample(2, 1)
sample(2, 1)
sample(2, 1)
sample(4, 1)
sample(3, 1)
sample(2, 1)
sample(2, 1)
sample(2, 1)
sample(2, 1)
shiny::runApp('Work/Git/sRPF')
sample(3, 1)
sample(2, 1)
sample(3, 1)
sample(3, 1)
sample(2, 1)
sample(2, 1)
sample(2, 1)
sample(2, 1)
sample(3, 2)
sample(3, 1)
sample(3, 1)
sample(2, 1)
sample(3, 1)
sample(2, 1)
sample(3, 2)
sample(3, 1)
sample(3, 1)
sample(3, 1)
sample(3, 1)
sample(2, 1)
sample(3, 1)
sample(3, 1)
sample(2, 1)
sample(2, 1)
library(tidyverse)
library(pheatmap)
library(genefilter)
library(Seurat)
read_csv("FACS/Colon-counts.csv") %>%
rename(gene = X1) -> counts
read_csv("annotations_FACS.csv") %>%
filter(cell %in% colnames(counts)) %>%
select(cell, cell_ontology_class) %>%
right_join(tibble(cell = colnames(counts)), by = "cell") %>%
replace_na(list(cell_ontology_class = "not annotated")) %>%
as.data.frame() -> annot
rownames(annot) <- annot$cell
counts[1:5, 1:5]
head(annot)
table(annot$cell_ontology_class)
read_csv("FACS/Colon-counts.csv") %>%
rename(gene = X1) -> counts
read_csv("annotations_FACS.csv") %>%
filter(cell %in% colnames(counts)) %>%
select(cell, cell_ontology_class) %>%
right_join(tibble(cell = colnames(counts)), by = "cell") %>%
replace_na(list(cell_ontology_class = "not annotated")) %>%
filter(cell != "gene") %>%
as.data.frame() -> annot
rownames(annot) <- annot$cell
tissue_of_interest <- "Colon"
counts %>%
as.data.frame() -> raw.data
rownames(raw.data) <- raw.data$gene
raw.data$gene <- c()
# Find ERCC's, compute the percent ERCC, and drop them from the raw data.
erccs <- grep(pattern = "^ERCC-", x = rownames(x = raw.data), value = TRUE)
percent.ercc <- Matrix::colSums(raw.data[erccs, ])/Matrix::colSums(raw.data)
ercc.index <- grep(pattern = "^ERCC-", x = rownames(x = raw.data), value = FALSE)
raw.data <- raw.data[-ercc.index,]
# Create the Seurat object with all the data
tiss <- CreateSeuratObject(raw.data = raw.data, project = tissue_of_interest,
min.cells = 5, min.genes = 5)
tiss <- AddMetaData(object = tiss, percent.ercc, col.name = "percent.ercc")
# Change default name for sums of counts from nUMI to nReads
colnames(tiss@meta.data)[colnames(tiss@meta.data) == 'nUMI'] <- 'nReads'
# Create metadata columns for annotations and subannotations
tiss@meta.data[,'annotation'] <- NA
tiss@meta.data[,'subannotation'] <- NA
ribo.genes <- grep(pattern = "^Rp[sl][[:digit:]]", x = rownames(x = tiss@data), value = TRUE)
percent.ribo <- Matrix::colSums(tiss@raw.data[ribo.genes, ])/Matrix::colSums(tiss@raw.data)
tiss <- AddMetaData(object = tiss, metadata = percent.ribo, col.name = "percent.ribo")
tiss <- FilterCells(object = tiss, subset.names = c("nGene", "nReads"),
low.thresholds = c(500, 50000), high.thresholds = c(25000, 2000000))
tiss <- NormalizeData(object = tiss)
tiss <- ScaleData(object = tiss, vars.to.regress = c("nReads", "percent.ribo","Rn45s"))
tiss <- FindVariableGenes(object = tiss, do.plot = TRUE, x.high.cutoff = Inf, y.cutoff = 0.5)
tiss@scale.data
data <- as.matrix(tiss@scale.data)
data[1:5, 1:5]
anotFitlered <- annot[colnames(data), 2, drop = F]
pheatmap(data[markers, order(anotFitlered$cluster)],
annotation_col = anotFitlered, cluster_rows = F, cluster_cols = F)
#markers for cell types in colon
markers <- c("Krt20", "Slc26a3", "Atoh1", "Spdef", "Dclk1", "Chga", "Chgb",
"Lgr5", "Mki67")
pheatmap(data[markers, order(anotFitlered$cluster)],
annotation_col = anotFitlered, cluster_rows = F, cluster_cols = F)
View(anotFitlered)
pheatmap(data[markers, order(anotFitlered$cell_ontology_class)],
annotation_col = anotFitlered, cluster_rows = F, cluster_cols = F)
pheatmap(data[markers, order(anotFitlered$cell_ontology_class)],
annotation_col = anotFitlered, cluster_rows = F, cluster_cols = F)
mVar <- tiss@var.genes
dist_varg <- as.matrix(dist(t(data[varGenes, ])))
varGenes <- tiss@var.genes
dist_varg <- as.matrix(dist(t(data[varGenes, ])))
dist_varg %>%
as.data.frame() %>%
rownames_to_column(var = "cell1") %>%
gather(cell2, distance, -(cell1)) %>%
left_join(annot, by = c("cell1" = "cell")) %>%
rename(cluster1 = cell_ontology_class) %>%
left_join(annot, by = c("cell2" = "cell")) %>%
rename(cluster2 = cell_ontology_class) %>%
mutate(sameClust = (cluster1 == cluster2)) %>%
ggplot() + geom_density(aes(x = distance, fill = sameClust), alpha = 0.75) +
ggtitle("Variable genes")
sample(3, 2)
sample(3, 1)
sample(2, 1)
sample(3, 1)
sample(2, 1)
sample(3, 1)
sample(2, 1)
sample(2, 1)
sample(2, 1)
sample(3, 2)
sample(3, 1)
sample(2, 1)
sample(3, 1)
sample(3, 1)
sample(2, 1)
4 + 6
`+` <- function(x, y) {
x + y - 10
}
4 + 6
`+` <- function(x, y) {
4 * 2
}
`+` <- function(x, y) {
x * y
}
4 + 6
`+` <- function(x, y) {
x * y
}
assign(`<-`, function(x, y) {
assign(x, y + 32)
}
)
?assign
assign("<-", function(x, y) {
assign(x, y + 32)
})
assign("<-", function(x, y) {
assign("tmp", y + 32)
})
k <- 2 * 8
tmp
assign("<-", function(x, y) {
assign("tmp", y + 32, envir=globalenv())
})
k <- 2 * 8
tmp
?plot.function
plot(dnorm, from = -3, to = 3)
4 + 2
tmp <- 8
class(tmp) <- "customclass"
tmp
tmp * 3
assign("<-.customclass", function(x, y) {
assign(deparse(subsitute(x)), y + 32, envir=globalenv())
})
tmp <- 4
asdf <- 5
library(ggplot2)
`+`
`<-`
`+.ggplot`
ggplot(cars)
class(ggplot(cars))
ggobj <- ggplot(cars)
`+.gg`
`+.ggplot`
`+`.ggplot
env
environment()
assign("<-", function(x, y){
assign(deparse(substitute(x)), y, parent.env(environment()))
})
tmp <- 68
f <- function(){
tmp <- 3
tmp * 3
}
f()
assign("<-", function(x, y){
assign(deparse(substitute(x)), y, parent.env())
})
f()
assign("<-", function(x, y){
assign(deparse(substitute(x)), y, environment())
})
f()
tmp <- 43
f()
tmp <- 34
assign("<-", function(x, y){
assign(deparse(substitute(x)), y, parent.env(environment()))
})
tmp <- 43
f()
obj <- 100
class(obj) <- "customclass"
obj <- 3
`(<-`
`)<-`
`())<-`
`()<-`
`class()<-`
`class<-`
`dim<-`
`dasd<-`
source('~/.active-rstudio-document', echo=TRUE)
`observable<-` <- function(x, y){
assign(deparse(subsitute(x)), y, parent.env(environment()))
}
observable(x) <- 4
observable(x) <-
`observable(x)<-``
`observable(x)<-`
`observable<-`
`%>%`
library(magrittr)
%>%
`%>%`
sample(3, 1)
sample(3, 1)
sample(3, 1)
sample(10, 1)
library(stringr)
?str_extract
shopping_list <- c("apples x4", "bag of flour", "bag of sugar", "milk x2")
str_extract(shopping_list, "\\d")
str_extract(shopping_list, "\\d", simplify = T)
str_extract_all(shopping_list, "\\d", simplify = T)
str_extract_all(shopping_list, "\\d", simplify = F)
str_extract_all("table2x3", "\\d")
str_extract_all("table2x3", "\\d", simplify = T)
x <- 1:10
y <- 1:10 + rnorm(10, sd = 0.3)
plot(x, y)
fit <- lm(y ~ x)
fit$coefficients
pred <- predict(1:10, se = T)
pred <- predict(1:10, fit, se = T)
pred <- predict(fit, 1:10, se = T)
pred <- predict(fit, data.frame(x = 1:10), se = T)
pred
s2 <-sum(fit$residuals^2)/8
praise("${EXCLAMATION}! You have done this ${adverb_manner}!")
library(praise)
praise("${EXCLAMATION}! You have done this ${adverb_manner}!")
praise("${EXCLAMATION}! You have done this ${adverb_manner}!")
sqrt(s2) * sqrt(1/10 + (1 - mean(1:10))^2/sum((1:10 - mean(1:10))^2))
sqrt(s2) * sqrt(1/10 + (2 - mean(1:10))^2/sum((1:10 - mean(1:10))^2))
fit
fit$effects
fit$rank
fit$assign
source('~/Work/Projects/Kaessmann/sex_bias/functions/f_newFit.R', echo=TRUE)
sample(3, 1)
sample(2, 1)
sample(2, 1)
sample(2, 1)
sample(2, 1)
sample(3, 1)
sample(2, 1)
sample(2, 1)
sample(3, 1)
sample(3, 1)
sample(6, 1)
sample(3, 1)
sample(8, 1)
sample(2, 1)
sample(2, 1)
sample(6, 1)
sample(32, 1)
sample(13, 1)
sample(8, 1)
sample(8, 1)
sample(6, 1)
sample(3, 1)
sample(31, 1)
sample(10, 1)
sample(29, 1)
sample(2, 1)
sample(8, 1)
sample(7, 1)
sample(28, 1)
sample(8, 1)
sample(26, 1)
sample(8, 1)
setwd("~/Work/Git/rlc/test")
library(Seurat)
library(rlc)
load("droplet_Kidney_seurat_tiss.Robj")
distsFrom <- function(point) {
sqrt(colSums((t(tiss@dr$pca@cell.embeddings) - tiss@dr$pca@cell.embeddings[point, ])^2))
}
clusts <- T
activePoint <- 1
openPage(useViewer = F)
lc_scatter(dat(x = tiss@dr$tsne@cell.embeddings[, 1], y = tiss@dr$tsne@cell.embeddings[, 2],
size = 4, width = 800, height = 800,
colourValue = (if(clusts) as.character(tiss@ident) else distsFrom(activePoint)),
transitionDuration = 0,
on_click = function(k){
clusts <<- !clusts
updateChart("tsne", updateType = "ElementStyle")
},
elementMouseOver = function(k) {
activePoint <<- k + 1
if(!clusts){
updateChart("tsne", updateType = "ElementStyle")
}
}), id = "tsne")
rawCounts_RNA <- as.matrix( read.csv( "~/Downloads/GSE100866_CBMC_8K_13AB_10X-RNA_umi.csv.gz", header=TRUE, row.names=1 ) )
rawCounts_ADT <- as.matrix( read.csv( "~/Downloads/GSE100866_CBMC_8K_13AB_10X-ADT_umi.csv.gz", header=TRUE, row.names=1 ) )
# They have spiked in ~ 4% mouse fibroblast cells
# Calculate for each cell the ratio of human to mouse genes:
gene_species <- sapply( strsplit( rownames(rawCounts_RNA), "_" ), `[`, 1 )
table( gene_species )
cell_counts_by_species <- sapply( unique( gene_species ), function(x)
colSums( rawCounts_RNA[ gene_species == x, , drop=FALSE ] ) )
head(cell_counts_by_species)
hist( log2( cell_counts_by_species[,"HUMAN"] / cell_counts_by_species[,"MOUSE"] ))
# subset raw counts matrix to only those cells that have >90% human UMIs, and to only human genes
rawCounts_RNA <- rawCounts_RNA[
gene_species == "HUMAN",
cell_counts_by_species[,"HUMAN"] / cell_counts_by_species[,"MOUSE"] > 10 ]
rownames(rawCounts_RNA) <- sub( "HUMAN_", "", rownames(rawCounts_RNA) )
rawCounts_ADT <- rawCounts_ADT[ , colnames(rawCounts_RNA)]
# sum of UMIs per cell to nomalize
countsums <- colSums( rawCorunts_RNA )
# sum of UMIs per cell to nomalize
countsums <- colSums( rawCounts_RNA )
means <- colMeans( t(rawCounts_RNA) / countsums )
vars <- genefilter::rowVars(t( t(rawCounts_RNA) / countsums ))
# let's use this as first plot
plot( means, vars, pch=".", log="xy" )
xg <- 10^seq( -9, -1, length.out=1000 )
lines( xg, xg * mean(1/countsums), col="red" )
# or better this
plot( means, vars / means / mean(1/countsums), pch=".", log="xy" )
abline( h=1, col="red")
# second plot should show one gene, maybe simply like this
plot( rawCounts_RNA["SDPR",]/countsums )
# or as a histogram
hist( log10( 1e-6 + rawCounts_RNA["SDPR",]/countsums ) )
# let's use this as first plot
plot( means, vars, pch=".", log="xy" )
abline( h=1, col="red")
# or better this
plot( means, vars / means / mean(1/countsums), pch=".", log="xy" )
openPage(layout = "table2x2")
closePage()
openPage(layout = "table2x2", useViewer = F)
# or better this
lc_scatter(dat(x = means, y = vars / means / mean(1/countsums), logScaleX = 10, logScaleY = 10), place = "A1")
means
vars / means / mean(1/countsums)
closePage()
openPage(layout = "table2x2", useViewer = F)
# or better this
lc_scatter(dat(x = means, y = vars / means / mean(1/countsums)), place = "A1")
closePage()
setwd("..")
library(devtools)
load_all()
# or better this
openPage(layout = "table2x2", useViewer = F)
lc_scatter(dat(x = means, y = vars / means / mean(1/countsums)), place = "A1")
closePage()
# or better this
openPage(layout = "table2x2", useViewer = F)
lc_scatter(dat(x = means, y = vars / means / mean(1/countsums), logScaleX = 10, logScaleY = 10), place = "A1")
# let's use this as first plot
plot( means, vars, pch=".", log="xy" )
plot( means, vars / means / mean(1/countsums), pch=".", log="xy" )
abline( h=1, col="red")
hist(means)
sum(means <= 0, na.rm = )
sum(means <= 0, na.rm = T)
plot( means, vars / means / mean(1/countsums), pch=".", log="xy" )
closePage()
load_all()
# or better this
openPage(layout = "table2x2", useViewer = F)
lc_scatter(dat(x = means, y = vars / means / mean(1/countsums), logScaleX = 10, logScaleY = 10), place = "A1")
lc_scatter(dat(x = means, y = vars / means / mean(1/countsums), logScaleX = 10, logScaleY = 10), place = "A1")
jsonlite::toJSON(l)
closePage()
load_all()
# or better this
openPage(layout = "table2x2", useViewer = F)
lc_scatter(dat(x = means, y = vars / means / mean(1/countsums), logScaleX = 10, logScaleY = 10), place = "A1")
closePage()
# or better this
openPage(layout = "table2x2", useViewer = F)
lc_scatter(dat(x = means, y = vars / means / mean(1/countsums), logScaleX = 10, logScaleY = 10, size = 3), place = "A1")
plot( means, vars / means / mean(1/countsums), pch=".", log="xy" )
lc_scatter(dat(x = means, y = vars / means / mean(1/countsums), logScaleX = 10, logScaleY = 10, size = 2), place = "A1")
closePage()
# or better this
openPage(layout = "table2x2", useViewer = F)
lc_scatter(dat(x = means, y = vars / means / mean(1/countsums), logScaleX = 10, logScaleY = 10, size = 2), place = "A1")
means[2001]
means[3144]
means[89]
log10(means[89])
library(jsonlite)
?toJSON
setwd("~/Work/Git/JsRCom/R")
setwd("..")
install()
